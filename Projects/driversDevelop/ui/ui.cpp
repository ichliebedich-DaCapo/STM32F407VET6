// Generated by Fairy on 2025-02-27  22:56

/*!INCLUDES_BEGIN!*/
#include "ui.hpp"

/*!INCLUDES_END!*/

// 组件定义 
namespace gui::widgets::main 
{
	Image img_screen_img_1;
	Chart chart_screen_chart_1;
	Button btn_screen_btn_1;
	Label label_screen_btn_1_label;
	Button btn_screen_btn_2;
	Label label_screen_btn_2_label;
	Button btn_screen_btn_3;
	Label label_screen_btn_3_label;
	Button btn_screen_btn_4;
	Label label_screen_btn_4_label;
	Button btn_screen_btn_5;
	Label label_screen_btn_5_label;
	Slider slider_screen_slider_1;
	Label label_screen_label_1;
	Label label_screen_label_2;
	Button btn_screen_btn_6;
	Label label_screen_btn_6_label;
	Button btn_screen_btn_7;
	Label label_screen_btn_7_label;
	Label label_screen_label_3;
/*!WIDGETS_DEFINE_BEGIN!*/

/*!WIDGETS_DEFINE_END!*/
}
using namespace gui::widgets::main;


/*!DECLARE_CODE_BEGIN!*/
// 全局变量定义
Timer updata_timer;
ChartSeries_t series; //数据 系列1
uint8_t length = 200;
uint8_t wave_start_index = 0;
uint16_t array_length = 400;
static inline size_t current_index = 0;     // 当前读取位置
static constexpr size_t RAND_POOL_SIZE = 400; // 预生成池大小
static inline uint8_t rand_pool[RAND_POOL_SIZE]={111,110,102,109,118,108,114,123,117,121,
                                                 118,117,109,116,115,117,115,110,112,116,
                                                 113,104,113,122,127,125,117,123,115,115,
                                                 124,129,129,125,115,107,113,115,117,124,
                                                 122,112,120,120,119,111,111,117,127,124,
                                                 117,127,130,126,132,135,145,150,153,147,
                                                 144,135,141,141,141,149,151,155,149,150,
                                                 149,157,157,147,151,154,163,170,165,171,
                                                 168,168,175,178,174,169,165,155,158,167,
                                                 174,172,178,170,174,168,163,162,157,148,
                                                 140,132,134,136,130,133,128,118,125,124,
                                                 131,140,141,134,124,130,127,125,127,119,
                                                 116,120,127,133,125,126,129,122,124,127,
                                                 127,130,135,138,136,142,148,150,143,136,
                                                 132,125,116,111,107,114,124,117,109,104,
                                                 107,99,96,101,111,113,118,120,121,122,
                                                 116,115,109,115,111,109,106,115,112,119,
                                                 116,106,98,98,102,96,104,111,112,114,
                                                 121,131,125,135,139,134,134,124,121,115,
                                                 106,116,107,109,118,128,137,127,134,126,
                                                 128,121,111,102,101,95,93,85,93,85,
                                                 79,83,92,82,79,86,85,88,89,80,
                                                 86,87,89,84,84,75,65,58,62,67,
                                                 72,78,72,71,71,73,79,81,81,77,
                                                 79,80,81,84,89,99,101,99,104,96,
                                                 99,99,93,100,99,102,112,112,107,98,
                                                 96,95,95,97,103,109,103,93,89,97,
                                                 95,88,97,87,80,78,79,82,85,82,
                                                 89,95,85,91,81,72,62,62,61,65,
                                                 69,61,59,52,43,33,36,28,31,21,
                                                 13,9,9,10,10,6,2,11,21,24,
                                                 22,13,22,28,24,31,33,42,34,42,
                                                 42,36,34,24,16,26,31,36,45,55,
                                                 61,54,47,50,50,48,45,42,50,46,
                                                 40,41,42,42,46,47,43,42,42,43,
                                                 34,32,30,30,28,24,24,28,23,19,
                                                 11,6,1,0,2,0,5,0,0,0,
                                                 7,2,5,4,7,1,0,9,10,19,
                                                 28,34,35,30,27,36,37,43,49,45,
                                                 48,38,30,32,29,25,20,25,27,24,


}; // 随机数池;
// 类声明
class Osc
{
public:
    // 生成随机数据
    static inline auto generate_data()->void;

    static inline auto toggle_generation() -> void;
    // 新增定时器回调函数
    static void timer_cb(lv_timer_t* timer)
    {
        if(Osc::is_generating) {
            Osc::generate_data();
        }
    }
private:
    // 添加生成状态标志
    static inline bool is_generating = false;
};
/*!DECLARE_CODE_END!*/


namespace gui::init
{
    void screen() 
    {
		scr.bg_color(lv_color_hex(0xffffff))
			.bg_grad_dir(LV_GRAD_DIR_NONE);

		img_screen_img_1.init()
			.pos(405, 5)
			.size(61, 42)
			.add_flag(LV_OBJ_FLAG_CLICKABLE)
			.src(&_dianzisheji_RGB565A8_61x42)
			.pivot(50, 50)
			.image_recolor_opa(0);

		chart_screen_chart_1.init()
			.pos(18, 8)
			.size(375, 227)
			.scrollbar_mode(LV_SCROLLBAR_MODE_OFF)
			.div_count(11, 15)
			.point_count(5)
			.range(LV_CHART_AXIS_PRIMARY_Y)
			.range(LV_CHART_AXIS_SECONDARY_Y)
			.bg_color(lv_color_hex(0xffffff))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.border_width(1)
			.border_opa(255)
			.border_color(lv_color_hex(0xe8e8e8))
			.border_side(LV_BORDER_SIDE_FULL)
			.radius(0)
			.line_width(2)
			.line_color(lv_color_hex(0xe8e8e8))
			.line_opa(255);

		btn_screen_btn_1.init()
			.pos(409, 59)
			.size(54, 28)
			.pad_all(0, LV_STATE_DEFAULT)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(5)
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER);

		label_screen_btn_1_label.init(btn_screen_btn_1)
			.text("BB")
			.center()
			.width(LV_PCT(100));

		btn_screen_btn_2.init()
			.pos(409, 129)
			.size(54, 28)
			.pad_all(0, LV_STATE_DEFAULT)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(5)
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER);

		label_screen_btn_2_label.init(btn_screen_btn_2)
			.text("Button")
			.center()
			.width(LV_PCT(100));

		btn_screen_btn_3.init()
			.pos(18, 265)
			.size(54, 28)
			.pad_all(0, LV_STATE_DEFAULT)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(5)
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER);

		label_screen_btn_3_label.init(btn_screen_btn_3)
			.text("Button")
			.center()
			.width(LV_PCT(100));

		btn_screen_btn_4.init()
			.pos(115, 265)
			.size(54, 28)
			.pad_all(0, LV_STATE_DEFAULT)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(5)
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER);

		label_screen_btn_4_label.init(btn_screen_btn_4)
			.text("Button")
			.center()
			.width(LV_PCT(100));

		btn_screen_btn_5.init()
			.pos(215, 265)
			.size(54, 28)
			.pad_all(0, LV_STATE_DEFAULT)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(5)
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER);

		label_screen_btn_5_label.init(btn_screen_btn_5)
			.text("Button")
			.center()
			.width(LV_PCT(100));

		slider_screen_slider_1.init()
			.pos(18, 246)
			.size(370, 5)
			.range(0, 100)
			.value(50)
			.bg_opa(60)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(50)
			.outline_width(0)
			.bg_opa(255, static_cast<int>(LV_PART_INDICATOR)|static_cast<int>(LV_STATE_DEFAULT))
			.bg_color(lv_color_hex(0x2195f6), static_cast<int>(LV_PART_INDICATOR)|static_cast<int>(LV_STATE_DEFAULT))
			.bg_grad_dir(LV_GRAD_DIR_NONE, static_cast<int>(LV_PART_INDICATOR)|static_cast<int>(LV_STATE_DEFAULT))
			.radius(50, static_cast<int>(LV_PART_INDICATOR)|static_cast<int>(LV_STATE_DEFAULT))
			.bg_opa(255, static_cast<int>(LV_PART_KNOB)|static_cast<int>(LV_STATE_DEFAULT))
			.bg_color(lv_color_hex(0x2195f6), static_cast<int>(LV_PART_KNOB)|static_cast<int>(LV_STATE_DEFAULT))
			.bg_grad_dir(LV_GRAD_DIR_NONE, static_cast<int>(LV_PART_KNOB)|static_cast<int>(LV_STATE_DEFAULT))
			.radius(50, static_cast<int>(LV_PART_KNOB)|static_cast<int>(LV_STATE_DEFAULT));

		label_screen_label_1.init()
			.pos(409, 97)
			.size(49, 19)
			.text("Label")
			.radius(0)
			.text_color(lv_color_hex(0x000000))
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER)
			.bg_opa(0);

		label_screen_label_2.init()
			.pos(409, 174)
			.size(52, 25)
			.text("Label")
			.radius(0)
			.text_color(lv_color_hex(0x000000))
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER)
			.bg_opa(0);

		btn_screen_btn_6.init()
			.pos(316, 265)
			.size(54, 28)
			.pad_all(0, LV_STATE_DEFAULT)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(5)
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER);

		label_screen_btn_6_label.init(btn_screen_btn_6)
			.text("Button")
			.center()
			.width(LV_PCT(100));

		btn_screen_btn_7.init()
			.pos(409, 205)
			.size(54, 28)
			.pad_all(0, LV_STATE_DEFAULT)
			.bg_color(lv_color_hex(0x2195f6))
			.bg_grad_dir(LV_GRAD_DIR_NONE)
			.radius(5)
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER);

		label_screen_btn_7_label.init(btn_screen_btn_7)
			.text("Button")
			.center()
			.width(LV_PCT(100));

		label_screen_label_3.init()
			.pos(409, 246)
			.size(52, 25)
			.text("Label")
			.radius(0)
			.text_color(lv_color_hex(0x000000))
			.font(&lv_customer_font_SourceHanSerifSC_Regular_13)
			.text_align(LV_TEXT_ALIGN_CENTER)
			.bg_opa(0);
    /*!INIT_CUSTOM_BEGIN!*/

        series=chart_screen_chart_1.update_mode(LV_CHART_UPDATE_MODE_SHIFT)  // 改为SHIFT模式
                                   .line_color(lv_color_hex(0x34e6ff))
                                   .point_count(128)
                                   .remove_dot()
                                   .add_series(lv_color_hex(0x34e6ff));

    /*!INIT_CUSTOM_END!*/
    }
    
    void events()
    {
    /*!EVENTS_CUSTOM_BEGIN!*/
        // 绑定 随机生成数据事件
        widgets::main::btn_screen_btn_1.OnClicked<Osc::toggle_generation>();
        updata_timer.create(Osc::timer_cb,20);
    /*!EVENTS_CUSTOM_END!*/
    }
}



/*!UI_IMPLEMENT_BEGIN!*/
// 用户自定义接口实现区（安全编辑区） 
namespace gui::interface {


}
/*!UI_IMPLEMENT_END!*/


/*!DEFINE_CODE_BEGIN!*/
// 类定义

// 新增切换生成状态的方法
auto Osc::toggle_generation() -> void
{
    is_generating = !is_generating;


    // 更新按钮文本
    label_screen_btn_1_label.text(is_generating  ? "BB" : "LL");
    if (is_generating)
    {
        updata_timer.resume();
    }
    else
    {
        updata_timer.pause();
    }

}

auto Osc::generate_data()->void
{
// 批量设置128个点
    for (int i = 0; i < 128; ++i) {
//         循环访问数组
        size_t idx = (current_index + i) % RAND_POOL_SIZE;
        chart_screen_chart_1.next_value(series, rand_pool[idx]);
    }
//     更新索引（每次前进1位置）
    current_index = (current_index + 20) % RAND_POOL_SIZE;
    if(wave_start_index+length>array_length) wave_start_index=0;

}
/*!DEFINE_CODE_END!*/
